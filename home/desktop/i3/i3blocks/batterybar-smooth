#!/usr/bin/env bash
#  batterybar; displays battery percentage as a bar on i3blocks
#  
#  Copyright 2015 Keftaa <adnan.37h@gmail.com>
#  
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#  
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#  
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#  
#  
readarray -t output <<< $(acpi battery)
battery_count=${#output[@]}

for line in "${output[@]}";
do
    percentages+=($(echo "$line" | grep -o -m1 '[0-9]\{1,3\}%' | tr -d '%'))
    statuses+=($(echo "$line" | egrep -o -m1 'Discharging|Charging|AC|Full|Unknown'))
    remaining=$(echo "$line" | egrep -o -m1 '[0-9][0-9]:[0-9][0-9]')
    if [[ -n $remaining ]]; then
        remainings+=(" ($remaining)")
    else 
        remainings+=("")
    fi
done

#squares="□□□□□"

#There are 8 colors that reflect the current battery percentage when 
#discharging
#dis_colors=("#FF0027" "#FF3B05" "#FFB923" "#FFD000" "#E4FF00" "#ADFF00"
			#"#6DFF00" "#10BA00") 
charging_color="#4dbfef"
full_color="#bdc1c7"
ac_color="#d95319"


while getopts 1:2:3:4:5:6:7:8:c:f:a:h opt; do
    case "$opt" in
        1) dis_colors[0]="$OPTARG";;
        2) dis_colors[1]="$OPTARG";;
        3) dis_colors[2]="$OPTARG";;
        4) dis_colors[3]="$OPTARG";;
        5) dis_colors[4]="$OPTARG";;
        6) dis_colors[5]="$OPTARG";;
        7) dis_colors[6]="$OPTARG";;
        8) dis_colors[7]="$OPTARG";;
        c) charging_color="$OPTARG";;
        f) full_color="$OPTARG";;
        a) ac_color="$OPTARG";;
        h) printf "Usage: batterybar [OPTION] color
        When discharging, there are 8 [1-8] levels colors.
        You can specify custom colors, for example:
        
        batterybar -1 red -2 \"#F6F6F6\" -8 green
        
        You can also specify the colors for the charging, AC and
        charged states:
        
        batterybar -c green -f white -a \"#EEEEEE\"\n";
        exit 0;
    esac
done
# ▁▂▃▄▅▆▇
end=$(($battery_count - 1))
for i in $(seq 0 $end);
do
    # if (( percentages[$i] >= 0 && percentages[$i] < 10  )); then
    #     squares="□□□□□"
    # elif (( percentages[$i] >= 10 && percentages[$i] < 30  )); then
    #     squares="□□□□■"
    # elif (( percentages[$i] >= 30 && percentages[$i] < 50 )); then
    #     squares="□□□■■"
    # elif (( percentages[$i] >= 50 && percentages[$i] < 70 )); then
    #     squares="□□■■■"
    # elif (( percentages[$i] >= 70 && percentages[$i] < 90 )); then
    #     squares="□■■■■"
    # elif (( percentages[$i] >=90 )); then
    #     squares="■■■■■"
    # fi

    # if (( percentages[$i] >= 0 && percentages[$i] < 8  )); then
    #     squares="▁"
    # elif (( percentages[$i] >= 8 && percentages[$i] < 24  )); then
    #     squares="▂"
    # elif (( percentages[$i] >= 24 && percentages[$i] < 40  )); then
    #     squares="▃"
    # elif (( percentages[$i] >= 40 && percentages[$i] < 56  )); then
    #     squares="▄"
    # elif (( percentages[$i] >= 56 && percentages[$i] < 72  )); then
    #     squares="▅"
    # elif (( percentages[$i] >= 72 && percentages[$i] < 88  )); then
    #     squares="▆"
    # elif (( percentages[$i] >= 88 && percentages[$i] < 96  )); then
    #     squares="▇"
    # fi


    case "${statuses[$i]}" in
    "Charging")
        color="$charging_color"
        #if (( percentages[$i] >= 0 && percentages[$i] < 10  )); then
        #    squares="ﮣ"
        #elif (( percentages[$i] >= 10 && percentages[$i] < 20  )); then
        #    squares="ﮣ"
        #elif (( percentages[$i] >= 20 && percentages[$i] < 30  )); then
        #    squares="ﮣ"
        #elif (( percentages[$i] >= 30 && percentages[$i] < 40  )); then
        #    squares="ﮣ"
        #elif (( percentages[$i] >= 40 && percentages[$i] < 50  )); then
        #    squares="ﮣ"
        #elif (( percentages[$i] >= 50 && percentages[$i] < 60  )); then
        #    squares="ﮣ"
        #elif (( percentages[$i] >= 60 && percentages[$i] < 70  )); then
        #    squares="ﮣ"
        #elif (( percentages[$i] >= 70 && percentages[$i] < 80  )); then
        #    squares="ﮣ"
        #elif (( percentages[$i] >= 80 && percentages[$i] < 90  )); then
        #    squares="ﮣ"
        #elif (( percentages[$i] >= 90 && percentages[$i] < 100  )); then
        #    squares="ﮣ"
        #fi
    ;;
    "Full")
        color="$full_color"
        #squares="ﮣ"
    ;;
    "AC")
        color="$ac_color"
        #squares="ﮣ"
    ;;
    "Discharging"|"Unknown")
        
        low_r=$((0x98))
        low_g=$((0x30))
        low_b=$((0x5a))
        high_r=$((0x8f))
        high_g=$((0x9d))
        high_b=$((0x47))

        percent_low=$((100-percentages[$i]))
        percent_high=$((percentages[$i]))

        red=$(($percent_low*$low_r/100+$percent_high*$high_r/100))
        green=$(($percent_low*$low_g/100+$percent_high*$high_g/100))
        blue=$(($percent_low*$low_b/100+$percent_high*$high_b/100))
        $echo $red
        $echo $green
        $echo $blue


        #green=$((256*percentages[$i]/100))
        #red=$((256*$((100-percentages[$i]))/100))
        printf -v color "#%02X%02X%02X" "$red" "$green" "$blue"
        #if (( percentages[$i] >= 0 && percentages[$i] < 10  )); then
        #    squares=""
        #elif (( percentages[$i] >= 10 && percentages[$i] < 20  )); then
        #    squares=""
        #elif (( percentages[$i] >= 20 && percentages[$i] < 30  )); then
        #    squares=""
        #elif (( percentages[$i] >= 30 && percentages[$i] < 40  )); then
        #    squares=""
        #elif (( percentages[$i] >= 40 && percentages[$i] < 50  )); then
        #    squares=""
        #elif (( percentages[$i] >= 50 && percentages[$i] < 60  )); then
        #    squares=""
        #elif (( percentages[$i] >= 60 && percentages[$i] < 70  )); then
        #    squares=""
        #elif (( percentages[$i] >= 70 && percentages[$i] < 80  )); then
        #    squares=""
        #elif (( percentages[$i] >= 80 && percentages[$i] < 90  )); then
        #    squares=""
        #elif (( percentages[$i] >= 90 && percentages[$i] < 100  )); then
        #    squares=""
        #fi
        #if (( percentages[$i] >= 0 && percentages[$i] < 10 )); then
            #color="${dis_colors[0]}"
        #elif (( percentages[$i] >= 10 && percentages[$i] < 20 )); then
            #color="${dis_colors[1]}"
        #elif (( percentages[$i] >= 20 && percentages[$i] < 30 )); then
            #color="${dis_colors[2]}"
        #elif (( percentages[$i] >= 30 && percentages[$i] < 40 )); then
            #color="${dis_colors[3]}"
        #elif (( percentages[$i] >= 40 && percentages[$i] < 50 )); then
            #color="${dis_colors[4]}"
        #elif (( percentages[$i] >= 50 && percentages[$i] < 65 )); then
            #color="${dis_colors[5]}"
        #elif (( percentages[$i] >= 65 && percentages[$i] < 80 )); then
            #color="${dis_colors[6]}"
        #elif (( percentages[$i] >= 80 )); then
            #color="${dis_colors[7]}"
        #fi

    ;;
  *) 
    color="$ac_color"
    esac

    # Print Battery number if there is more than one
    if (( $end > 0 )) ; then 
        message="$message $(($i + 1)):" 
    fi

    #if [[ "$BLOCK_BUTTON" -eq 1 ]]; then 
    #    message="$message ${statuses[$i]} <span foreground=\"$color\">${percentages[$i]}%${remainings[i]}</span>"
    #fi
    message="$message <span foreground=\"$color\">${percentages[$i]}%$squares</span>" 
    
done
echo $message
